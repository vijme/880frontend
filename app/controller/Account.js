/*
 * File: app/controller/Account.js
 *
 * This file was generated by Sencha Architect version 3.1.0.
 * http://www.sencha.com/products/architect/
 *
 * This file requires use of the Sencha Touch 2.4.x library, under independent license.
 * License of Sencha Architect does not include license for Sencha Touch 2.4.x. For more
 * details see http://www.sencha.com/license or contact license@sencha.com.
 *
 * This file will be auto-generated each and everytime you save your project.
 *
 * Do NOT hand edit this file.
 */

Ext.define('PatientVitalsMonitoring.controller.Account', {
    extend: 'Ext.app.Controller',

    config: {
        refs: {
            mainView: 'mainview',
            loginPanel: 'mainview #loginPanel',
            welcomePanel: 'mainview #welcomePanel',
            vitalsForm1: 'vitalsForm1'
        },

        control: {
            "mainview #showLoginButton": {
                tap: 'showLogin'
            },
            "mainview #showRegisterButton": {
                tap: 'showRegister'
            },
            "loginform #loginButton": {
                tap: 'login'
            },
            "registerform #registerButton": {
                tap: 'register'
            }
        }
    },

    showLogin: function(button, e, eOpts) {

        var loginForm = Ext.create('widget.loginform'),	// Login form
            mainView = this.getMainView();				// Main view

        // Navigate to login
        mainView.push({
            xtype: "loginform",
            title: "Login"
        });

    },

    showRegister: function(button, e, eOpts) {

        var registerForm = Ext.create('widget.registerform'),	// Registration form
            mainView = this.getMainView();						// Main view

        // Navigate to register
        mainView.push({
            xtype: "registerform",
            title: "Register"
        });

    },

    login: function(button, e, eOpts) {

        var name = Ext.getCmp('txtusrName').getValue(),
            passwd = Ext.getCmp('txtPasswd').getValue();
        

        var form = button.up('formpanel'),			// Login form
        	values = form.getValues(),				// Form values
        	mainView = this.getMainView(),			// Main view
        	loginPanel = this.getLoginPanel(),		// Login and register buttons
        	welcomePanel = this.getWelcomePanel();	// Welcome panel
            //vitalDetails = this.getvitalDetailsForm();

        // Success
        var successCallback = function(resp, ops) {

            // Go back
            //mainView.pop();

            // Hide login panel
            //loginPanel.hide();

            var vitalDetails = Ext.create('widget.vitalsForm1');	// Registration form


                // Navigate to register
                mainView.push({
                    xtype: "vitalsForm1",
                    title: "Data"
                });

        };

        // Failure
        var failureCallback = function(resp, ops) {

            // Show login failure error
            Ext.Msg.alert("Login Failure", resp);

        };


        // TODO: Login using server-side authentication service
        /* Ext.Ajax.request({
        	url: 'http://127.0.0.1:3000/check',
            method: 'GET',

            type:'jsonp',
            useDefaultXhrHeader: false,

            params:
            {
                 username : name,
                 password: passwd
            },
            
        	success: successCallback,
        	failure: failureCallback
         });*/

        // Just run success for now
        successCallback();
    },

    register: function(button, e, eOpts) {

        var name = Ext.getCmp('txtName').getValue(),
            hospId = Ext.getCmp('txtHospId').getValue(),
            passwd = Ext.getCmp('txtPasswd').getValue(),
            passwd2 = Ext.getCmp('txtPasswd2').getValue();
        
        if (passwd != passwd2){
            Ext.Msg.alert('ALERT', 'Passwords donot match', Ext.emptyFn);
        }
        else {
            var loginrecord = Ext.ModelManager.getModel('PatientVitalsMonitoring.model.login');
            var record = new loginrecord({  Name: name, HospID:hospId, Passwd: passwd  });
            errs = record.validate();
            var msg = '';    
            if (!errs.isValid()) {
                    errs.each(function (err) {
                    msg += err.getMessage() + '<br/>';
                });
                Ext.Msg.alert('ERROR', msg);
            } else {
                Ext.Msg.alert('SUCCESS', 'Looks like the model is valid');
                record.save();
            } 
        }// if
        
            
        var form = button.up('formpanel'),			// Login form
            values = form.getValues(),				// Form values
            mainView = this.getMainView(),			// Main view
            loginPanel = this.getLoginPanel(),		// Login and register buttons
            welcomePanel = this.getWelcomePanel();	// Welcome panel
            vitalDetailsForm = this.getVitalDetailsForm();

        // Success
        var successCallback = function(resp, ops) {
            Ext.Msg.alert('REGISTRATION STATUS', 'Success', Ext.emptyFn);
             var vitalDetails = Ext.create('widget.vitalForm1');	// Registration form


                // Navigate to register
                mainView.push({
                    xtype: "vitalForm1",
                    title: "Vital Details"
                });

        };

        // Failure
        var failureCallback = function(resp, ops) {

            // Show login failure error
            Ext.Msg.alert("Registration Failure", resp);

        };



        // TODO: Register using server-side authentication service
        Ext.Ajax.request({
            url: 'http://127.0.0.1:3000/registers.json',
            method: 'POST',

            type:'jsonp',
            useDefaultXhrHeader: false,

            params:
            {
                username : name,
                hospID: hospId,
                passwd: passwd

            },
        		success: successCallback,
        		failure: failureCallback
        });

        // Just run success for now
        //successCallback();
    }

});